name: Build and deploy Docker image of BookStore API to server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build_and_deploy:
    name: Build Docker image and deploy to server
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Build the new version of the image
        run: docker build . --file Dockerfile --tag bookstore-api:latest

      - name: Save the Docker image to a tar file
        run: docker save bookstore-api:latest -o bookstore-api.tar

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      - name: Create deployment directory on server
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} 'mkdir -p /tmp/bookstore'

      - name: Transfer Docker image to server
        run: scp -P ${{ secrets.SSH_PORT }} bookstore-api.tar ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:/tmp/bookstore/bookstore-api.tar

      - name: Transfer Docker Compose file to server
        run: scp -P ${{ secrets.SSH_PORT }} docker-compose.full.yml ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:/tmp/bookstore/docker-compose.full.yml

      - name: Transfer application files to server
        run: |
          scp -P ${{ secrets.SSH_PORT }} -r * ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:/tmp/bookstore/

      - name: Load Docker image on server
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} 'docker load -i /tmp/bookstore/bookstore-api.tar'

      - name: Create empty .env file
        run: touch .env

      - name: Use docker-compose to stop containers on server
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} 'COMPOSE_PARAMIKO_SSH=1 docker-compose -f /tmp/bookstore/docker-compose.full.yml stop'

      - name: Use docker-compose to remove containers on server
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} 'COMPOSE_PARAMIKO_SSH=1 docker-compose -f /tmp/bookstore/docker-compose.full.yml rm -f'

      - name: Use docker-compose to deploy remotely
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USERNAME: ${{ secrets.SERVER_USERNAME }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          ASPNETCORE_ENVIRONMENT: Production
          PostgreSQL__ConnectionString: ${{ secrets.DATABASE_URL }}
          JwtSettings__Secret: ${{ secrets.JWT_SECRET }}
          JwtSettings__Issuer: BookStoreIssuer
          JwtSettings__Audience: BookStoreAudience
          JwtSettings__TokenLifetime: 120
          AdminSettings__AdminEmail: ${{ secrets.ADMIN_EMAIL }}
          AdminSettings__AdminPassword: ${{ secrets.ADMIN_PASSWORD }}
          AdminSettings__AdminUsername: ${{ secrets.ADMIN_USERNAME }}
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} 'COMPOSE_PARAMIKO_SSH=1 docker-compose -f /tmp/bookstore/docker-compose.full.yml up --build --force-recreate -d'

      - name: Cleanup temporary files on server
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} 'rm -rf /tmp/bookstore/bookstore-api.tar /tmp/bookstore/docker-compose.full.yml /tmp/bookstore/*'

      - name: Remove unused Docker images on server
        run: ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} 'docker image prune -f'
